{"version":3,"sources":["hamt.js"],"names":[],"mappings":"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","file":"hamt.js","sourcesContent":["/**\n\t@fileOverview Hash Array Mapped Trie.\n\n\tCode based on: https://github.com/exclipy/pdata\n*/\nconst hamt = {}; // export\n\n/* Configuration\n ******************************************************************************/\nconst SIZE = 5;\n\nconst BUCKET_SIZE = Math.pow(2, SIZE);\n\nconst MASK = BUCKET_SIZE - 1;\n\nconst MAX_INDEX_NODE = BUCKET_SIZE / 2;\n\nconst MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n\n/*\n ******************************************************************************/\nconst nothing = ({});\n\nconst constant = x => () => x;\n\n/**\n\tGet 32 bit hash of string.\n\n\tBased on:\n\thttp://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n*/\nconst hash = hamt.hash = str => {\n    const type = typeof str;\n    if (type === 'number')\n        return str;\n    if (type !== 'string')\n        str += '';\n\n    let hash = 0;\n    for (let i = 0, len = str.length; i < len; ++i) {\n        const c = str.charCodeAt(i);\n        hash = (((hash << 5) - hash) + c) | 0;\n    }\n    return hash;\n};\n\n/* Bit Ops\n ******************************************************************************/\n/**\n\tHamming weight.\n\n\tTaken from: http://jsperf.com/hamming-weight\n*/\nconst popcount = (x) => {\n    x -= ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x += (x >> 8);\n    x += (x >> 16);\n    return (x & 0x7f);\n};\n\nconst hashFragment = (shift, h) =>\n    (h >>> shift) & MASK;\n\nconst toBitmap = x =>\n    1 << x;\n\nconst fromBitmap = (bitmap, bit) =>\n    popcount(bitmap & (bit - 1));\n\n/* Array Ops\n ******************************************************************************/\n/**\n\tSet a value in an array.\n\n  @param mutate Should the input array be mutated?\n\t@param at Index to change.\n\t@param v New value\n\t@param arr Array.\n*/\nconst arrayUpdate = (mutate, at, v, arr) => {\n    let out = arr;\n    if (!mutate) {\n      const len = arr.length;\n      out = new Array(len);\n      for (let i = 0; i < len; ++i)\n          out[i] = arr[i];\n    }\n    out[at] = v;\n    return out;\n};\n\n/**\n\tRemove a value from an array.\n\n  @param mutate Should the input array be mutated?\n\t@param at Index to remove.\n\t@param arr Array.\n*/\nconst arraySpliceOut = (mutate, at, arr) => {\n    const len = arr.length;\n    const out = new Array(len - 1);\n    let i = 0, g = 0;\n    while (i < at)\n        out[g++] = arr[i++];\n    ++i;\n    while (i < len)\n        out[g++] = arr[i++];\n    return out;\n};\n\n/**\n\tInsert a value into an array.\n\n  @param mutate Should the input array be mutated?\n\t@param at Index to insert at.\n\t@param v Value to insert,\n\t@param arr Array.\n*/\nconst arraySpliceIn = (mutate, at, v, arr) => {\n    const len = arr.length;\n    const out = new Array(len + 1);\n    let i = 0, g = 0;\n    while (i < at)\n        out[g++] = arr[i++];\n    out[g++] = v;\n    while (i < len)\n        out[g++] = arr[i++];\n    return out;\n};\n\n/* Node Structures\n ******************************************************************************/\nconst LEAF = 1;\nconst COLLISION = 2;\nconst INDEX = 3;\nconst ARRAY = 4;\n\n/**\n\tEmpty node.\n*/\nconst empty = ({ __hamt_isEmpty: true });\n\nconst isEmptyNode = x =>\n    x === empty || (x && x.__hamt_isEmpty);\n\n/**\n\tLeaf holding a value.\n\n\t@member hash Hash of key.\n\t@member key Key.\n\t@member value Value stored.\n*/\nconst Leaf = (hash, key, value) => ({\n    type: LEAF,\n    hash: hash,\n    key: key,\n    value: value,\n    _modify: Leaf__modify\n});\n\n/**\n\tLeaf holding multiple values with the same hash but different keys.\n\n\t@member hash Hash of key.\n\t@member children Array of collision children node.\n*/\nconst Collision = (hash, children) => ({\n    type: COLLISION,\n    hash: hash,\n    children: children,\n    _modify: Collision__modify\n});\n\n/**\n\tInternal node with a sparse set of children.\n\n\tUses a bitmap and array to pack children.\n\n\t@member mask Bitmap that encode the positions of children in the array.\n\t@member children Array of child nodes.\n*/\nconst IndexedNode = (mask, children) => ({\n    type: INDEX,\n    mask: mask,\n    children: children,\n    _modify: IndexedNode__modify\n});\n\n/**\n\tInternal node with many children.\n\n\t@member size Number of children.\n\t@member children Array of child nodes.\n*/\nconst ArrayNode = (size, children) => ({\n    type: ARRAY,\n    size: size,\n    children: children,\n    _modify: ArrayNode__modify\n});\n\n/**\n\tIs `node` a leaf node?\n*/\nconst isLeaf = node =>\n    (  node === empty\n    || node.type ===  LEAF\n    || node.type === COLLISION);\n\n/* Internal node operations.\n ******************************************************************************/\n/**\n\tExpand an indexed node into an array node.\n\n\t@param frag Index of added child.\n\t@param child Added child.\n\t@param mask Index node mask before child added.\n\t@param subNodes Index node children before child added.\n*/\nconst expand = (frag, child, bitmap, subNodes) => {\n    const arr = [];\n    let bit = bitmap;\n    let count = 0;\n    for (let i = 0; bit; ++i) {\n        if (bit & 1)\n            arr[i] = subNodes[count++];\n        bit >>>= 1;\n    }\n    arr[frag] = child;\n    return ArrayNode(count + 1, arr);\n};\n\n/**\n\tCollapse an array node into a indexed node.\n\n\t@param count Number of elements in new array.\n\t@param removed Index of removed element.\n\t@param elements Array node children before remove.\n*/\nconst pack = (count, removed, elements) => {\n    const children = new Array(count - 1);\n    let g = 0;\n    let bitmap = 0;\n    for (let i = 0, len = elements.length; i < len; ++i) {\n        const elem = elements[i];\n        if (i !== removed && !isEmptyNode(elem)) {\n            children[g++] = elem;\n            bitmap |= 1 << i;\n        }\n    }\n    return IndexedNode(bitmap, children);\n};\n\n/**\n\tMerge two leaf nodes.\n\n\t@param shift Current shift.\n\t@param h1 Node 1 hash.\n\t@param n1 Node 1.\n\t@param h2 Node 2 hash.\n\t@param n2 Node 2.\n*/\nconst mergeLeaves = (shift, h1, n1, h2, n2) => {\n    if (h1 === h2)\n        return Collision(h1, [n2, n1]);\n\n    const subH1 = hashFragment(shift, h1);\n    const subH2 = hashFragment(shift, h2);\n    return IndexedNode(toBitmap(subH1) | toBitmap(subH2),\n        subH1 === subH2\n            ?[mergeLeaves(shift + SIZE, h1, n1, h2, n2)]\n            :subH1 < subH2 ? [n1, n2] : [n2, n1]);\n};\n\n/**\n    Update an entry in a collision list.\n\n    @param hash Hash of collision.\n    @param list Collision list.\n    @param f Update function.\n    @param k Key to update.\n*/\nconst updateCollisionList = (h, list, f, k) => {\n    const len = list.length;\n    for (let i = 0; i < len; ++i) {\n        const child = list[i];\n        if (child.key === k) {\n            const value = child.value;\n            const newValue = f(value);\n            if (newValue === value)\n                return list;\n\n            return newValue === nothing\n                ?arraySpliceOut(false, i, list)\n                :arrayUpdate(false, i, Leaf(h, k, newValue), list);\n        }\n    }\n\n    const newValue = f();\n    return newValue === nothing\n        ?list\n        :arrayUpdate(false, len, Leaf(h, k, newValue), list);\n};\n\n/* Editing\n ******************************************************************************/\nconst Leaf__modify = function(shift, f, h, k) {\n   if (k === this.key) {\n        const v = f(this.value);\n        if (v === this.value)\n            return this;\n        return v === nothing ? empty : Leaf(h, k, v);\n    }\n    const v = f();\n    return v === nothing\n        ?this\n        :mergeLeaves(shift, this.hash, this, h, Leaf(h, k, v));\n};\n\nconst Collision__modify = function(shift, f, h, k) {\n    if (h === this.hash) {\n        const list = updateCollisionList(this.hash, this.children, f, k);\n        if (list === this.children)\n            return this;\n\n        return list.length > 1\n            ?Collision(this.hash, list)\n            :list[0]; // collapse single element collision list\n    }\n    const v = f();\n    return v === nothing\n        ?this\n        :mergeLeaves(shift, this.hash, this, h, Leaf(h, k, v));\n};\n\nconst IndexedNode__modify = function(shift, f, h, k) {\n    const mask = this.mask;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const bit = toBitmap(frag);\n    const indx = fromBitmap(mask, bit);\n    const exists = mask & bit;\n    const current = exists ? children[indx] : empty;\n    const child = current._modify(shift + SIZE, f, h, k);\n\n    if (current === child)\n        return this;\n\n    if (exists && isEmptyNode(child)) { // remove\n        const bitmap = mask & ~bit;\n        if (!bitmap)\n            return empty;\n        return children.length <= 2 && isLeaf(children[indx ^ 1])\n            ?children[indx ^ 1] // collapse\n            :IndexedNode(\n                bitmap,\n                arraySpliceOut(false, indx, children))\n    }\n    if (!exists && !isEmptyNode(child)) { // add\n        return children.length >= MAX_INDEX_NODE\n            ?expand(frag, child, mask, children)\n            :IndexedNode(\n                mask | bit,\n                arraySpliceIn(false, indx, child, children))\n    }\n\n    // modify\n    return IndexedNode(\n        mask,\n        arrayUpdate(false, indx, child, children));\n};\n\nconst ArrayNode__modify = function(shift, f, h, k) {\n    const count = this.size;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const child = children[frag];\n    const newChild = (child || empty)._modify(shift + SIZE, f, h, k);\n\n    if (child === newChild)\n        return this;\n\n    if (isEmptyNode(child) && !isEmptyNode(newChild)) { // add\n        return ArrayNode(\n            count + 1,\n            arrayUpdate(false, frag, newChild, children))\n    }\n    if (!isEmptyNode(child) && isEmptyNode(newChild)) { // remove\n        return count - 1 <= MIN_ARRAY_NODE\n            ?pack(count, frag, children)\n            :ArrayNode(\n                count - 1,\n                arrayUpdate(false, frag, empty, children))\n    }\n\n    // modify\n    return ArrayNode(\n        count,\n        arrayUpdate(false, frag, newChild, children));\n};\n\nempty._modify = (_, f, h, k) => {\n    const v = f();\n    return v === nothing ? empty : Leaf(h, k, v);\n};\n\n/*\n ******************************************************************************/\nfunction Map(editable, edit, config, root) {\n    this._editable = editable;\n    this._edit = edit;\n    this._config = config;\n    this._root = root;\n};\n\nMap.prototype.setRoot = function(newRoot) {\n  return newRoot === this._root\n    ?this\n    :new Map(this._editable, this._edit, this._config, newRoot);\n};\n\n/* Queries\n ******************************************************************************/\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `alt` if none.\n*/\nconst tryGetHash = hamt.tryGetHash = (alt, hash, key, map) => {\n    let node = map._root;\n    let shift = 0;\n    while (true) switch (node.type) {\n    case LEAF:\n    {\n        return key === node.key ? node.value : alt;\n    }\n    case COLLISION:\n    {\n        if (hash === node.hash) {\n            const children = node.children;\n            for (let i = 0, len = children.length; i < len; ++i) {\n                const child = children[i];\n                if (key === child.key)\n                    return child.value;\n            }\n        }\n        return alt;\n    }\n    case INDEX:\n    {\n        const frag = hashFragment(shift, hash);\n        const bit = toBitmap(frag);\n        if (node.mask & bit) {\n            node = node.children[fromBitmap(node.mask, bit)]\n            shift += SIZE;\n            break;\n        }\n        return alt;\n    }\n    case ARRAY:\n    {\n        node = node.children[hashFragment(shift, hash)];\n        if (node) {\n            shift += SIZE;\n            break;\n        }\n        return alt;\n    }\n    default:\n        return alt;\n    }\n};\n\nMap.prototype.tryGetHash = function(alt, hash, key) {\n    return tryGetHash(alt, hash, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `tryGetHash`\n*/\nconst tryGet = hamt.tryGet = (alt, key, map) =>\n    tryGetHash(alt, map._config.hash(key), key, map);\n\nMap.prototype.tryGet = function(alt, key) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `undefined` if none.\n*/\nconst getHash = hamt.getHash = (hash, key, map) =>\n    tryGetHash(undefined, hash, key, map);\n\nMap.prototype.getHash = function(hash, key) {\n    return getHash(hash, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `get`\n*/\nconst get = hamt.get = (key, map) =>\n    tryGetHash(undefined, map._config.hash(key), key, map);\n\nMap.prototype.get = function(key, alt) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Does an entry exist for `key` in `map`? Uses custom `hash`.\n*/\nconst hasHash = hamt.has = (hash, key, map) =>\n    tryGetHash(nothing, hash, key, map) !== nothing;\n\nMap.prototype.hasHash = function(hash, key) {\n    return hasHash(hash, key, this);\n};\n\n/**\n    Does an entry exist for `key` in `map`? Uses internal hash function.\n*/\nconst has = hamt.has = (key, map) =>\n    hasHash(map._config.hash(key), key, map);\n\nMap.prototype.has = function(key) {\n    return has(key, this);\n};\n\n/**\n\n*/\nconst defKeyCompare = (x, y) => x === y;\n\nhamt.make = (config) =>\n  new Map(false, 0, {\n    keyEq: (config && config.keyEq) || defKeyCompare,\n    hash: (config && config.hash) || hash\n  }, empty);\n\n/**\n    Does `map` contain any elements?\n*/\nconst isEmpty = hamt.isEmpty = (map) =>\n    !!isEmptyNode(map._root);\n\nMap.prototype.isEmpty = function() {\n    return isEmpty(this);\n};\n\n/* Updates\n ******************************************************************************/\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    custom hash.\n\n    `f` is invoked with the current value for `k` if it exists,\n    or no arguments if no such value exists. `modify` will always either\n    update or insert a value into the map.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst modifyHash = hamt.modifyHash = (f, hash, key, map) => {\n    const root = map._root;\n    const newRoot = root._modify(0, f, hash, key);\n    return map.setRoot(newRoot);\n};\n\nMap.prototype.modifyHash = function(hash, key, f) {\n    return modifyHash(f, hash, key, this);\n};\n\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    internal hash function.\n\n    @see `modifyHash`\n*/\nconst modify = hamt.modify = (f, key, map) =>\n    modifyHash(f, map._config.hash(key), key, map);\n\nMap.prototype.modify = function(key, f) {\n    return modify(f, key, this);\n};\n\n/**\n    Store `value` for `key` in `map` using custom `hash`.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst setHash = hamt.setHash = (hash, key, value, map) =>\n    modifyHash(constant(value), hash, key, map);\n\nMap.prototype.setHash = function(hash, key, value) {\n    return setHash(hash, key, value, this);\n};\n\n/**\n    Store `value` for `key` in `map` using internal hash function.\n\n    @see `setHash`\n*/\nconst set = hamt.set = (key, value, map) =>\n    setHash(map._config.hash(key), key, value, map);\n\nMap.prototype.set = function(key, value) {\n    return set(key, value, this);\n};\n\n/**\n    Remove the entry for `key` in `map`.\n\n    Returns a map with the value removed. Does not alter `map`.\n*/\nconst del = constant(nothing);\nconst removeHash = hamt.removeHash = (hash, key, map) =>\n    modifyHash(del, hash, key, map);\n\nMap.prototype.removeHash = Map.prototype.deleteHash = function(hash, key) {\n    return removeHash(hash, key, this);\n};\n\n/**\n    Remove the entry for `key` in `map` using internal hash function.\n\n    @see `removeHash`\n*/\nconst remove = hamt.remove = (key, map) =>\n    removeHash(map._config.hash(key), key, map);\n\nMap.prototype.remove = Map.prototype.delete = function(key) {\n    return remove(key, this);\n};\n\n/* Mutation\n ******************************************************************************/\nconst beginMutation = hamt.beginMutation = (tree) =>\n     new Map(\n         /*true,\n         tree.edit + 1,\n         tree.config,*/\n         tree._root);\n\nMap.prototype.beginMutation = function() {\n  return beginMutation(this);\n};\n\n /**\n  * Low level operation that marks a HAMT as immutable.\n  *\n  * @param tree HAMT\n  */\nconst endMutation = hamt.endMutation = (tree) =>\n      new Map(\n        /* false,\n         tree.edit,\n         tree.config,*/\n         tree._root);\n\n Map.prototype.endMutation = function() {\n   return endMutation(this);\n };\n\n/**\n*/\nconst mutate = hamt.mutate = (f, map) => {\n  const transient = beginMutation(map);\n  f(transient);\n  return endMutation(transient);\n};\n\nMap.prototype.mutate = function(f) {\n  return mutate(f, this);\n};\n\n/* Traversal\n ******************************************************************************/\n/**\n    Apply a continuation.\n*/\nconst appk = k =>\n    k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);\n\n/**\n    Recursively visit all values stored in an array of nodes lazily.\n*/\nvar lazyVisitChildren = (len, children, i, f, k) => {\n    while (i < len) {\n        var child = children[i++];\n        if (child && !isEmptyNode(child))\n            return lazyVisit(child, f, [len, children, i, f, k]);\n    }\n    return appk(k);\n};\n\n/**\n    Recursively visit all values stored in `node` lazily.\n*/\nconst lazyVisit = (node, f, k) => {\n    switch (node.type) {\n    case LEAF:\n        return { value: f(node), rest: k };\n\n    case COLLISION:\n    case ARRAY:\n    case INDEX:\n        const children = node.children;\n        return lazyVisitChildren(children.length, children, 0, f, k);\n\n    default:\n        return appk(k);\n    }\n};\n\nconst DONE = { done: true };\n\n/**\n    Javascript iterator over a map.\n*/\nfunction MapIterator(v) {\n    this.v = v;\n};\n\nMapIterator.prototype.next = function() {\n    if (!this.v)\n        return DONE;\n    const v0 = this.v;\n    this.v = appk(v0.rest);\n    return v0;\n};\n\nMapIterator.prototype[Symbol.iterator] = function() {\n    return this;\n};\n\n/**\n    Lazily visit each value in map with function `f`.\n*/\nconst visit = (map, f) =>\n    new MapIterator(lazyVisit(map._root, f));\n\n/**\n    Get a Javascsript iterator of `map`.\n\n    Iterates over `[key, value]` arrays.\n*/\nconst buildPairs = (x) => [x.key, x.value];\nconst entries = hamt.entries = (map) =>\n    visit(map, buildPairs);\n\nMap.prototype.entries = Map.prototype[Symbol.iterator] = function() {\n    return entries(this);\n};\n\n/**\n    Get array of all keys in `map`.\n\n    Order is not guaranteed.\n*/\nconst buildKeys = (x) => x.key;\nconst keys = hamt.keys = (map) =>\n    visit(map, buildKeys);\n\nMap.prototype.keys = function() { return keys(this); }\n\n/**\n    Get array of all values in `map`.\n\n    Order is not guaranteed, duplicates are preserved.\n*/\nconst buildValues = x => x.value;\nconst values = hamt.values = Map.prototype.values = map =>\n    visit(map, buildValues);\n\nMap.prototype.values = function() {\n    return values(this);\n};\n\n/* Fold\n ******************************************************************************/\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function mapping accumulated value, value, and key to new value.\n    @param z Starting value.\n    @param m HAMT\n*/\nconst fold = hamt.fold = (f, z, m) => {\n    const root = m._root;\n    if (root.type === LEAF)\n        return f(z, root.value, root.key);\n\n    const toVisit = [root.children];\n    let children;\n    while (children = toVisit.pop()) {\n        for (let i = 0, len = children.length; i < len; ) {\n            const child = children[i++];\n            if (child && child.type) {\n                if (child.type === LEAF)\n                    z = f(z, child.value, child.key);\n                else\n                    toVisit.push(child.children);\n            }\n        }\n    }\n    return z;\n};\n\nMap.prototype.fold = function(f, z) {\n    return fold(f, z, this);\n};\n\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function invoked with value and key\n    @param map HAMT\n*/\nconst forEach = hamt.forEach = (f, map) =>\n    fold((_, value, key) => f(value, key, map), null, map);\n\nMap.prototype.forEach = function(f) {\n    return forEach(f, this);\n};\n\n/* Aggregate\n ******************************************************************************/\n/**\n    Get the number of entries in `map`.\n*/\nconst inc = x => x + 1;\nconst count = hamt.count = map =>\n    fold(inc, 0, map);\n\nMap.prototype.count = function() {\n    return count(this);\n};\n\nObject.defineProperty(Map.prototype, 'size', {\n    get: Map.prototype.count\n});\n\n/* Export\n ******************************************************************************/\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = hamt;\n} else if (typeof define === 'function' && define.amd) {\n    define('hamt', [], () => hamt);\n} else {\n    this.hamt = hamt;\n}\n"],"sourceRoot":"/source/"}