{"version":3,"sources":["hamt.js"],"names":[],"mappings":"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","file":"hamt.js","sourcesContent":["/**\n    @fileOverview Hash Array Mapped Trie.\n\n    Code based on: https://github.com/exclipy/pdata\n*/\nconst hamt = {}; // export\n\n/* Configuration\n ******************************************************************************/\nconst SIZE = 5;\n\nconst BUCKET_SIZE = Math.pow(2, SIZE);\n\nconst MASK = BUCKET_SIZE - 1;\n\nconst MAX_INDEX_NODE = BUCKET_SIZE / 2;\n\nconst MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n\n/*\n ******************************************************************************/\nconst nothing = ({});\n\nconst constant = x => () => x;\n\n/**\n    Get 32 bit hash of string.\n\n    Based on:\n    http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n*/\nconst hash = hamt.hash = str => {\n    const type = typeof str;\n    if (type === 'number')\n        return str;\n    if (type !== 'string')\n        str += '';\n\n    let hash = 0;\n    for (let i = 0, len = str.length; i < len; ++i) {\n        const c = str.charCodeAt(i);\n        hash = (((hash << 5) - hash) + c) | 0;\n    }\n    return hash;\n};\n\n/* Bit Ops\n ******************************************************************************/\n/**\n    Hamming weight.\n\n    Taken from: http://jsperf.com/hamming-weight\n*/\nconst popcount = (x) => {\n    x -= ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x += (x >> 8);\n    x += (x >> 16);\n    return (x & 0x7f);\n};\n\nconst hashFragment = (shift, h) =>\n    (h >>> shift) & MASK;\n\nconst toBitmap = x =>\n    1 << x;\n\nconst fromBitmap = (bitmap, bit) =>\n    popcount(bitmap & (bit - 1));\n\n/* Array Ops\n ******************************************************************************/\n/**\n    Set a value in an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to change.\n    @param v New value\n    @param arr Array.\n*/\nconst arrayUpdate = (mutate, at, v, arr) => {\n    let out = arr;\n    if (!mutate) {\n        const len = arr.length;\n        out = new Array(len);\n        for (let i = 0; i < len; ++i)\n            out[i] = arr[i];\n    }\n    out[at] = v;\n    return out;\n};\n\n/**\n    Remove a value from an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to remove.\n    @param arr Array.\n*/\nconst arraySpliceOut = (mutate, at, arr) => {\n    const len = arr.length;\n    let i = 0,\n        g = 0;\n    let out = arr;\n    if (mutate) {\n        i = g = at;\n    } else {\n        out = new Array(len - 1);\n        while (i < at)\n            out[g++] = arr[i++];\n        ++i;\n    }\n    while (i < len)\n        out[g++] = arr[i++];\n    return out;\n};\n\n/**\n    Insert a value into an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to insert at.\n    @param v Value to insert,\n    @param arr Array.\n*/\nconst arraySpliceIn = (mutate, at, v, arr) => {\n    const len = arr.length;\n    if (mutate) {\n        let i = len;\n        while (i >= at)\n            arr[i--] = arr[i];\n        arr[at] = v;\n        return arr;\n    }\n    let i = 0, g = 0;\n    const out = new Array(len + 1);\n    while (i < at)\n        out[g++] = arr[i++];\n    out[at] = v;\n    while (i < len)\n        out[++g] = arr[i++];\n    return out;\n};\n\n/* Node Structures\n ******************************************************************************/\nconst LEAF = 1;\nconst COLLISION = 2;\nconst INDEX = 3;\nconst ARRAY = 4;\n\n/**\n    Empty node.\n*/\nconst empty = ({\n    __hamt_isEmpty: true\n});\n\nconst isEmptyNode = x =>\n    x === empty || (x && x.__hamt_isEmpty);\n\n/**\n    Leaf holding a value.\n\n    @member edit Edit of the node.\n    @member hash Hash of key.\n    @member key Key.\n    @member value Value stored.\n*/\nconst Leaf = (edit, hash, key, value) => ({\n    type: LEAF,\n    edit: edit,\n    hash: hash,\n    key: key,\n    value: value,\n    _modify: Leaf__modify\n});\n\n/**\n    Leaf holding multiple values with the same hash but different keys.\n\n    @member edit Edit of the node.\n    @member hash Hash of key.\n    @member children Array of collision children node.\n*/\nconst Collision = (edit, hash, children) => ({\n    type: COLLISION,\n    edit: edit,\n    hash: hash,\n    children: children,\n    _modify: Collision__modify\n});\n\n/**\n    Internal node with a sparse set of children.\n\n    Uses a bitmap and array to pack children.\n\n  @member edit Edit of the node.\n    @member mask Bitmap that encode the positions of children in the array.\n    @member children Array of child nodes.\n*/\nconst IndexedNode = (edit, mask, children) => ({\n    type: INDEX,\n    edit: edit,\n    mask: mask,\n    children: children,\n    _modify: IndexedNode__modify\n});\n\n/**\n    Internal node with many children.\n\n    @member edit Edit of the node.\n    @member size Number of children.\n    @member children Array of child nodes.\n*/\nconst ArrayNode = (edit, size, children) => ({\n    type: ARRAY,\n    edit: edit,\n    size: size,\n    children: children,\n    _modify: ArrayNode__modify\n});\n\n/**\n    Is `node` a leaf node?\n*/\nconst isLeaf = node =>\n    (node === empty || node.type === LEAF || node.type === COLLISION);\n\n/* Internal node operations.\n ******************************************************************************/\n/**\n    Expand an indexed node into an array node.\n\n  @param edit Current edit.\n    @param frag Index of added child.\n    @param child Added child.\n    @param mask Index node mask before child added.\n    @param subNodes Index node children before child added.\n*/\nconst expand = (edit, frag, child, bitmap, subNodes) => {\n    const arr = [];\n    let bit = bitmap;\n    let count = 0;\n    for (let i = 0; bit; ++i) {\n        if (bit & 1)\n            arr[i] = subNodes[count++];\n        bit >>>= 1;\n    }\n    arr[frag] = child;\n    return ArrayNode(edit, count + 1, arr);\n};\n\n/**\n    Collapse an array node into a indexed node.\n\n  @param edit Current edit.\n    @param count Number of elements in new array.\n    @param removed Index of removed element.\n    @param elements Array node children before remove.\n*/\nconst pack = (edit, count, removed, elements) => {\n    const children = new Array(count - 1);\n    let g = 0;\n    let bitmap = 0;\n    for (let i = 0, len = elements.length; i < len; ++i) {\n        const elem = elements[i];\n        if (i !== removed && !isEmptyNode(elem)) {\n            children[g++] = elem;\n            bitmap |= 1 << i;\n        }\n    }\n    return IndexedNode(edit, bitmap, children);\n};\n\n/**\n    Merge two leaf nodes.\n\n    @param shift Current shift.\n    @param h1 Node 1 hash.\n    @param n1 Node 1.\n    @param h2 Node 2 hash.\n    @param n2 Node 2.\n*/\nconst mergeLeaves = (edit, shift, h1, n1, h2, n2) => {\n    if (h1 === h2)\n        return Collision(edit, h1, [n2, n1]);\n\n    const subH1 = hashFragment(shift, h1);\n    const subH2 = hashFragment(shift, h2);\n    return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2),\n        subH1 === subH2 ? [mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);\n};\n\n/**\n    Update an entry in a collision list.\n\n    @param hash Hash of collision.\n    @param list Collision list.\n    @param f Update function.\n    @param k Key to update.\n*/\nconst updateCollisionList = (mutate, edit, keyEq, h, list, f, k) => {\n    const len = list.length;\n    for (let i = 0; i < len; ++i) {\n        const child = list[i];\n        if (keyEq(k, child.key)) {\n            const value = child.value;\n            const newValue = f(value);\n            if (newValue === value)\n                return list;\n\n            return newValue === nothing ? arraySpliceOut(mutate, i, list) : arrayUpdate(mutate, i, Leaf(edit, h, k, newValue), list);\n        }\n    }\n\n    const newValue = f();\n    return newValue === nothing ? list : arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);\n};\n\nconst canEditNode = (edit, node) => edit === node.edit;\n\n/* Editing\n ******************************************************************************/\nconst Leaf__modify = function(edit, keyEq, shift, f, h, k) {\n    if (keyEq(k, this.key)) {\n        const v = f(this.value);\n        if (v === this.value)\n            return this;\n        if (canEditNode(edit, this)) {\n            this.value = v;\n            return this;\n        }\n        return v === nothing ? empty : Leaf(edit, h, k, v);\n    }\n    const v = f();\n    return v === nothing ? this : mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n};\n\nconst Collision__modify = function(edit, keyEq, shift, f, h, k) {\n    if (h === this.hash) {\n        const canEdit = canEditNode(edit, this);\n        const list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k);\n        if (list === this.children)\n            return this;\n\n        return list.length > 1 ? Collision(edit, this.hash, list) : list[0]; // collapse single element collision list\n    }\n    const v = f();\n    return v === nothing ? this : mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n};\n\nconst IndexedNode__modify = function(edit, keyEq, shift, f, h, k) {\n    const mask = this.mask;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const bit = toBitmap(frag);\n    const indx = fromBitmap(mask, bit);\n    const exists = mask & bit;\n    const current = exists ? children[indx] : empty;\n    const child = current._modify(edit, keyEq, shift + SIZE, f, h, k);\n\n    if (current === child)\n        return this;\n\n    const canEdit = canEditNode(edit, this);\n    let bitmap = mask;\n    let newChildren;\n    if (exists && isEmptyNode(child)) { // remove\n        bitmap &= ~bit;\n        if (!bitmap)\n            return empty;\n        if (children.length <= 2 && isLeaf(children[indx ^ 1]))\n            return children[indx ^ 1] // collapse\n\n        newChildren = arraySpliceOut(canEdit, indx, children);\n    } else if (!exists && !isEmptyNode(child)) { // add\n        if (children.length >= MAX_INDEX_NODE)\n            return expand(edit, frag, child, mask, children);\n\n        bitmap |= bit;\n        newChildren = arraySpliceIn(canEdit, indx, child, children);\n    } else { // modify\n        newChildren = arrayUpdate(canEdit, indx, child, children);\n    }\n\n    if (canEdit) {\n        this.mask = bitmap;\n        this.children = newChildren;\n        return this;\n    } else {\n        return IndexedNode(edit, bitmap, newChildren);\n    }\n};\n\nconst ArrayNode__modify = function(edit, keyEq, shift, f, h, k) {\n    let count = this.size;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const child = children[frag];\n    const newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k);\n\n    if (child === newChild)\n        return this;\n\n    const canEdit = canEditNode(edit, this);\n    let newChildren;\n    if (isEmptyNode(child) && !isEmptyNode(newChild)) { // add\n        ++count;\n        newChildren = arrayUpdate(canEdit, frag, newChild, children);\n    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) { // remove\n        --count;\n        if (count <= MIN_ARRAY_NODE)\n            return pack(edit, count, frag, children);\n        newChildren = arrayUpdate(canEdit, frag, empty, children);\n    } else { // modify\n        newChildren = arrayUpdate(canEdit, frag, newChild, children);\n    }\n\n    if (canEdit) {\n        this.size = count;\n        this.children = newChildren;\n        return this;\n    } else {\n        return ArrayNode(edit, count, newChildren);\n    }\n};\n\nempty._modify = (edit, keyEq, shift, f, h, k) => {\n    const v = f();\n    return v === nothing ? empty : Leaf(edit, h, k, v);\n};\n\n/*\n ******************************************************************************/\nfunction Map(editable, edit, config, root) {\n    this._editable = editable;\n    this._edit = edit;\n    this._config = config;\n    this._root = root;\n};\n\nMap.prototype.setRoot = function(newRoot) {\n    if (newRoot === this._root)\n        return this;\n    if (this._editable) {\n        this._root = newRoot;\n        return this;\n    }\n    return new Map(this._editable, this._edit, this._config, newRoot);\n};\n\n/* Queries\n ******************************************************************************/\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `alt` if none.\n*/\nconst tryGetHash = hamt.tryGetHash = (alt, hash, key, map) => {\n    let node = map._root;\n    let shift = 0;\n    const keyEq = map._config.keyEq;\n    while (true) switch (node.type) {\n        case LEAF:\n            {\n                return keyEq(key, node.key) ? node.value : alt;\n            }\n        case COLLISION:\n            {\n                if (hash === node.hash) {\n                    const children = node.children;\n                    for (let i = 0, len = children.length; i < len; ++i) {\n                        const child = children[i];\n                        if (keyEq(key, child.key))\n                            return child.value;\n                    }\n                }\n                return alt;\n            }\n        case INDEX:\n            {\n                const frag = hashFragment(shift, hash);\n                const bit = toBitmap(frag);\n                if (node.mask & bit) {\n                    node = node.children[fromBitmap(node.mask, bit)]\n                    shift += SIZE;\n                    break;\n                }\n                return alt;\n            }\n        case ARRAY:\n            {\n                node = node.children[hashFragment(shift, hash)];\n                if (node) {\n                    shift += SIZE;\n                    break;\n                }\n                return alt;\n            }\n        default:\n            return alt;\n    }\n};\n\nMap.prototype.tryGetHash = function(alt, hash, key) {\n    return tryGetHash(alt, hash, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `tryGetHash`\n*/\nconst tryGet = hamt.tryGet = (alt, key, map) =>\n    tryGetHash(alt, map._config.hash(key), key, map);\n\nMap.prototype.tryGet = function(alt, key) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `undefined` if none.\n*/\nconst getHash = hamt.getHash = (hash, key, map) =>\n    tryGetHash(undefined, hash, key, map);\n\nMap.prototype.getHash = function(hash, key) {\n    return getHash(hash, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `get`\n*/\nconst get = hamt.get = (key, map) =>\n    tryGetHash(undefined, map._config.hash(key), key, map);\n\nMap.prototype.get = function(key, alt) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Does an entry exist for `key` in `map`? Uses custom `hash`.\n*/\nconst hasHash = hamt.has = (hash, key, map) =>\n    tryGetHash(nothing, hash, key, map) !== nothing;\n\nMap.prototype.hasHash = function(hash, key) {\n    return hasHash(hash, key, this);\n};\n\n/**\n    Does an entry exist for `key` in `map`? Uses internal hash function.\n*/\nconst has = hamt.has = (key, map) =>\n    hasHash(map._config.hash(key), key, map);\n\nMap.prototype.has = function(key) {\n    return has(key, this);\n};\n\n/**\n\n*/\nconst defKeyCompare = (x, y) => x === y;\n\nhamt.make = (config) =>\n    new Map(0, 0, {\n        keyEq: (config && config.keyEq) || defKeyCompare,\n        hash: (config && config.hash) || hash\n    }, empty);\n\n/**\n    Does `map` contain any elements?\n*/\nconst isEmpty = hamt.isEmpty = (map) =>\n    !!isEmptyNode(map._root);\n\nMap.prototype.isEmpty = function() {\n    return isEmpty(this);\n};\n\n/* Updates\n ******************************************************************************/\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    custom hash.\n\n    `f` is invoked with the current value for `k` if it exists,\n    or no arguments if no such value exists. `modify` will always either\n    update or insert a value into the map.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst modifyHash = hamt.modifyHash = (f, hash, key, map) => {\n    const newRoot = map._root._modify(\n        map._editable ? map._edit : NaN,\n        map._config.keyEq,\n        0,\n        f,\n        hash,\n        key);\n    return map.setRoot(newRoot);\n};\n\nMap.prototype.modifyHash = function(hash, key, f) {\n    return modifyHash(f, hash, key, this);\n};\n\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    internal hash function.\n\n    @see `modifyHash`\n*/\nconst modify = hamt.modify = (f, key, map) =>\n    modifyHash(f, map._config.hash(key), key, map);\n\nMap.prototype.modify = function(key, f) {\n    return modify(f, key, this);\n};\n\n/**\n    Store `value` for `key` in `map` using custom `hash`.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst setHash = hamt.setHash = (hash, key, value, map) =>\n    modifyHash(constant(value), hash, key, map);\n\nMap.prototype.setHash = function(hash, key, value) {\n    return setHash(hash, key, value, this);\n};\n\n/**\n    Store `value` for `key` in `map` using internal hash function.\n\n    @see `setHash`\n*/\nconst set = hamt.set = (key, value, map) =>\n    setHash(map._config.hash(key), key, value, map);\n\nMap.prototype.set = function(key, value) {\n    return set(key, value, this);\n};\n\n/**\n    Remove the entry for `key` in `map`.\n\n    Returns a map with the value removed. Does not alter `map`.\n*/\nconst del = constant(nothing);\nconst removeHash = hamt.removeHash = (hash, key, map) =>\n    modifyHash(del, hash, key, map);\n\nMap.prototype.removeHash = Map.prototype.deleteHash = function(hash, key) {\n    return removeHash(hash, key, this);\n};\n\n/**\n    Remove the entry for `key` in `map` using internal hash function.\n\n    @see `removeHash`\n*/\nconst remove = hamt.remove = (key, map) =>\n    removeHash(map._config.hash(key), key, map);\n\nMap.prototype.remove = Map.prototype.delete = function(key) {\n    return remove(key, this);\n};\n\n/* Mutation\n ******************************************************************************/\n /**\n     Mark `map` as mutable.\n  */\nconst beginMutation = hamt.beginMutation = (map) =>\n    new Map(\n        map._editable + 1,\n        map._edit + 1,\n        map._config,\n        map._root);\n\nMap.prototype.beginMutation = function() {\n    return beginMutation(this);\n};\n\n/**\n    Mark `map` as immutable.\n */\nconst endMutation = hamt.endMutation = (map) => {\n    map._editable = map._editable && map._editable - 1;\n    return map;\n};\n\nMap.prototype.endMutation = function() {\n    return endMutation(this);\n};\n\n/**\n    Mutate `map` within the context of `f`.\n    @param f\n    @param map HAMT\n*/\nconst mutate = hamt.mutate = (f, map) => {\n    const transient = beginMutation(map);\n    f(transient);\n    return endMutation(transient);\n};\n\nMap.prototype.mutate = function(f) {\n    return mutate(f, this);\n};\n\n/* Traversal\n ******************************************************************************/\n/**\n    Apply a continuation.\n*/\nconst appk = k =>\n    k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);\n\n/**\n    Recursively visit all values stored in an array of nodes lazily.\n*/\nvar lazyVisitChildren = (len, children, i, f, k) => {\n    while (i < len) {\n        const child = children[i++];\n        if (child && !isEmptyNode(child))\n            return lazyVisit(child, f, [len, children, i, f, k]);\n    }\n    return appk(k);\n};\n\n/**\n    Recursively visit all values stored in `node` lazily.\n*/\nconst lazyVisit = (node, f, k) => {\n    switch (node.type) {\n        case LEAF:\n            return {\n                value: f(node),\n                rest: k\n            };\n\n        case COLLISION:\n        case ARRAY:\n        case INDEX:\n            const children = node.children;\n            return lazyVisitChildren(children.length, children, 0, f, k);\n\n        default:\n            return appk(k);\n    }\n};\n\nconst DONE = {\n    done: true\n};\n\n/**\n    Javascript iterator over a map.\n*/\nfunction MapIterator(v) {\n    this.v = v;\n};\n\nMapIterator.prototype.next = function() {\n    if (!this.v)\n        return DONE;\n    const v0 = this.v;\n    this.v = appk(v0.rest);\n    return v0;\n};\n\nMapIterator.prototype[Symbol.iterator] = function() {\n    return this;\n};\n\n/**\n    Lazily visit each value in map with function `f`.\n*/\nconst visit = (map, f) =>\n    new MapIterator(lazyVisit(map._root, f));\n\n/**\n    Get a Javascsript iterator of `map`.\n\n    Iterates over `[key, value]` arrays.\n*/\nconst buildPairs = (x) => [x.key, x.value];\nconst entries = hamt.entries = (map) =>\n    visit(map, buildPairs);\n\nMap.prototype.entries = Map.prototype[Symbol.iterator] = function() {\n    return entries(this);\n};\n\n/**\n    Get array of all keys in `map`.\n\n    Order is not guaranteed.\n*/\nconst buildKeys = (x) => x.key;\nconst keys = hamt.keys = (map) =>\n    visit(map, buildKeys);\n\nMap.prototype.keys = function() {\n    return keys(this);\n}\n\n/**\n    Get array of all values in `map`.\n\n    Order is not guaranteed, duplicates are preserved.\n*/\nconst buildValues = x => x.value;\nconst values = hamt.values = Map.prototype.values = map =>\n    visit(map, buildValues);\n\nMap.prototype.values = function() {\n    return values(this);\n};\n\n/* Fold\n ******************************************************************************/\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function mapping accumulated value, value, and key to new value.\n    @param z Starting value.\n    @param m HAMT\n*/\nconst fold = hamt.fold = (f, z, m) => {\n    const root = m._root;\n    if (root.type === LEAF)\n        return f(z, root.value, root.key);\n\n    const toVisit = [root.children];\n    let children;\n    while (children = toVisit.pop()) {\n        for (let i = 0, len = children.length; i < len;) {\n            const child = children[i++];\n            if (child && child.type) {\n                if (child.type === LEAF)\n                    z = f(z, child.value, child.key);\n                else\n                    toVisit.push(child.children);\n            }\n        }\n    }\n    return z;\n};\n\nMap.prototype.fold = function(f, z) {\n    return fold(f, z, this);\n};\n\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function invoked with value and key\n    @param map HAMT\n*/\nconst forEach = hamt.forEach = (f, map) =>\n    fold((_, value, key) => f(value, key, map), null, map);\n\nMap.prototype.forEach = function(f) {\n    return forEach(f, this);\n};\n\n/* Aggregate\n ******************************************************************************/\n/**\n    Get the number of entries in `map`.\n*/\nconst inc = x => x + 1;\nconst count = hamt.count = map =>\n    fold(inc, 0, map);\n\nMap.prototype.count = function() {\n    return count(this);\n};\n\nObject.defineProperty(Map.prototype, 'size', {\n    get: Map.prototype.count\n});\n\n/* Export\n ******************************************************************************/\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = hamt;\n} else if (typeof define === 'function' && define.amd) {\n    define('hamt', [], () => hamt);\n} else {\n    this.hamt = hamt;\n}\n"],"sourceRoot":"/source/"}